import random

class PasswordGenerator:
    #Here the user's choice, alphabet, number and special characters to be used in the password are stored
    def __init__(self):
        self.choice = int(input('Welcome to the password generator. How powerful should this password be? 0 - weak; 1 - strong: '))
        self.letters = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
        self.numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        self.special = ["!", "?", "@", "#", "$", "%", "*"]
    #Combination of letters, numbers and special characters
        self.join = self.letters + self.numbers + self.special
    #List that contains all the letters of the alphabet in capital letters. This list will be used for strong passwords
        self.upperLetters = [letter.upper() for letter in self.letters]
    #The password will be stored here. It is in a list, and will be explained shortly, but when returned it will be transformed into a string
        self.password = []
        
    #This function returns the password generated according to the user's choice
    def randomPassword(self):
        if self.choice == 0:
            #Range(8) so that 8 characters are stored in self.password
            for i in range(8):
                #random.randint is used to have a random index of self.letters, and thus, each index during the iteration will be stored in self.password
                self.password.append(self.letters[random.randint(0, len(self.letters) - 1)])
              
            #as self.password is in principle a list, to obtain the result we want, we use .join to return a string instead of a list    
            print("".join(self.password))
        
        if self.choice == 1:
            for i in range(8):
                self.password.append(self.join[random.randint(0, len(self.join) - 1)])
                
            #As a strong password normally has at least one uppercase letter, here it is entered using self.upperLetters. Here random.randint is also used to search for a random index within self.upperLetters
            self.password[random.randint(0, (len(self.password) - 1))] = self.upperLetters[random.randint(0, (len(self.upperLetters) - 1))]
        
            
            #Here, when using .join, in a list that may contain letters and numbers, it may generate an error. Then we iterate through each element that was stored in self.password and turn it into a string. oh yes, we can use .join to return a string
            listToString = ''.join(str(key) for key in self.password)
        
            print(listToString)
        
password = PasswordGenerator()
password.randomPassword()
